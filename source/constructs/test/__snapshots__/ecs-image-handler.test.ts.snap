// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "testCFDistributionUrl2EDDF602": Object {
      "Description": "The CloudFront distribution url",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "testDistribution6586AF58",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "testServiceLoadBalancerDNS9D168467": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "testServiceLBDE367B95",
          "DNSName",
        ],
      },
    },
    "testServiceServiceURLBB5A24D5": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "testServiceLBDE367B95",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "testSrcBucketS3Url4DDD7660": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "testSrcBucketAD4FA500",
            },
          ],
        ],
      },
    },
  },
  "Resources": Object {
    "EcsDefaultClusterMnL3mNNYNVpc18E0451A": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "testCacheAllQueryString0AE63AEF": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "DefaultTTL": 86400,
          "MaxTTL": 31536000,
          "MinTTL": 0,
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                "testCacheAllQueryString3365C488-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": false,
            "EnableAcceptEncodingGzip": false,
            "HeadersConfig": Object {
              "HeaderBehavior": "none",
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "all",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "testDistribution6586AF58": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "Comment": "test distribution",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "CachePolicyId": Object {
              "Ref": "testCacheAllQueryString0AE63AEF",
            },
            "Compress": true,
            "OriginRequestPolicyId": Object {
              "Ref": "testForwardAllQueryString59F56102",
            },
            "TargetOriginId": "testDistributionOriginGroup1C39A2A4E",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "OriginGroups": Object {
            "Items": Array [
              Object {
                "FailoverCriteria": Object {
                  "StatusCodes": Object {
                    "Items": Array [
                      403,
                    ],
                    "Quantity": 1,
                  },
                },
                "Id": "testDistributionOriginGroup1C39A2A4E",
                "Members": Object {
                  "Items": Array [
                    Object {
                      "OriginId": "testDistributionOrigin1320E6C28",
                    },
                    Object {
                      "OriginId": "testDistributionOrigin2503E261E",
                    },
                  ],
                  "Quantity": 2,
                },
              },
            ],
            "Quantity": 1,
          },
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "testServiceLBDE367B95",
                  "DNSName",
                ],
              },
              "Id": "testDistributionOrigin1320E6C28",
            },
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "testSrcBucketAD4FA500",
                  "RegionalDomainName",
                ],
              },
              "Id": "testDistributionOrigin2503E261E",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "testDistributionOrigin2S3Origin9B183C99",
                      },
                    ],
                  ],
                },
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "testDistributionOrigin2S3Origin9B183C99": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for testDistributionOrigin2503E261E",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "testForwardAllQueryString59F56102": Object {
      "Properties": Object {
        "OriginRequestPolicyConfig": Object {
          "CookiesConfig": Object {
            "CookieBehavior": "none",
          },
          "HeadersConfig": Object {
            "HeaderBehavior": "none",
          },
          "Name": "testForwardAllQueryString613D6245",
          "QueryStringsConfig": Object {
            "QueryStringBehavior": "all",
          },
        },
      },
      "Type": "AWS::CloudFront::OriginRequestPolicy",
    },
    "testService8DB925F6": Object {
      "DependsOn": Array [
        "testServiceLBPublicListenerECSGroup7DFD31EB",
        "testServiceLBPublicListenerEB5AF4B3",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "EcsDefaultClusterMnL3mNNYNVpc18E0451A",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "web",
            "ContainerPort": 8080,
            "TargetGroupArn": Object {
              "Ref": "testServiceLBPublicListenerECSGroup7DFD31EB",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "testServiceSecurityGroup65EED2B9",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "testVpcPrivateSubnet1SubnetD6A658CE",
              },
              Object {
                "Ref": "testVpcPrivateSubnet2Subnet72DFDA9D",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "testServiceTaskDefF3CA73E3",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "testServiceLBDE367B95": Object {
      "DependsOn": Array [
        "testVpcPublicSubnet1DefaultRoute1D00869F",
        "testVpcPublicSubnet2DefaultRouteEA8CD41C",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "testServiceLBSecurityGroup9AAEE723",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "testVpcPublicSubnet1SubnetA39A0F0F",
          },
          Object {
            "Ref": "testVpcPublicSubnet2Subnet94D5D0E0",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "testServiceLBPublicListenerEB5AF4B3": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "testServiceLBPublicListenerECSGroup7DFD31EB",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "testServiceLBDE367B95",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "testServiceLBPublicListenerECSGroup7DFD31EB": Object {
      "Properties": Object {
        "HealthCheckPath": "/",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "testServiceLBSecurityGroup9AAEE723": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB testServiceLB19F31A5A",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testServiceLBSecurityGrouptotestServiceSecurityGroupE1717353808006BC3114": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "testServiceSecurityGroup65EED2B9",
            "GroupId",
          ],
        },
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "testServiceLBSecurityGroup9AAEE723",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "testServiceSecurityGroup65EED2B9": Object {
      "Properties": Object {
        "GroupDescription": "test/test/Service/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "testServiceSecurityGroupfromtestServiceLBSecurityGroup848028818080460F5BB0": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "testServiceSecurityGroup65EED2B9",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "testServiceLBSecurityGroup9AAEE723",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "testServiceTaskCountTargetCpuScalingB069038F": Object {
      "Properties": Object {
        "PolicyName": "testServiceTaskCountTargetCpuScalingA6AF95FB",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "testServiceTaskCountTargetD1C54E8B",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "testServiceTaskCountTargetD1C54E8B": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "EcsDefaultClusterMnL3mNNYNVpc18E0451A",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "testService8DB925F6",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "testServiceTaskDefExecutionRole91AF1139": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "testServiceTaskDefExecutionRoleDefaultPolicyD07B3AFD": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/aws-cdk/assets",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testServiceTaskDefwebLogGroup11B77DAE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testServiceTaskDefExecutionRoleDefaultPolicyD07B3AFD",
        "Roles": Array [
          Object {
            "Ref": "testServiceTaskDefExecutionRole91AF1139",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testServiceTaskDefF3CA73E3": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "SRC_BUCKET",
                "Value": Object {
                  "Ref": "testSrcBucketAD4FA500",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ".dkr.ecr.",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  Object {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/aws-cdk/assets:4b4efd89e1e681e5d2b23763a0efbb33c93d5e9f164d0fc0a6f563e6f3a06ce4",
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "testServiceTaskDefwebLogGroup11B77DAE",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "Service",
              },
            },
            "Name": "web",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "2048",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "testServiceTaskDefExecutionRole91AF1139",
            "Arn",
          ],
        },
        "Family": "testServiceTaskDef47B6F147",
        "Memory": "4096",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "testServiceTaskDefTaskRoleFBE83AAF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "testServiceTaskDefTaskRoleDefaultPolicy4808278B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "testSrcBucketAD4FA500",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "testSrcBucketAD4FA500",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "testServiceTaskDefTaskRoleDefaultPolicy4808278B",
        "Roles": Array [
          Object {
            "Ref": "testServiceTaskDefTaskRoleFBE83AAF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testServiceTaskDefTaskRoleFBE83AAF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "testServiceTaskDefwebLogGroup11B77DAE": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "testSrcBucketAD4FA500": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "testSrcBucketPolicyF1F0F538": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "testSrcBucketAD4FA500",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "testDistributionOrigin2S3Origin9B183C99",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "testSrcBucketAD4FA500",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "testVpc2D302CD6": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "testVpcIGW063D7053": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "testVpcPrivateSubnet1DefaultRoute1F0CFDB0": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "testVpcPublicSubnet1NATGateway52C27271",
        },
        "RouteTableId": Object {
          "Ref": "testVpcPrivateSubnet1RouteTable7745B734",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "testVpcPrivateSubnet1RouteTable7745B734": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "testVpcPrivateSubnet1RouteTableAssociation44C93AAE": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "testVpcPrivateSubnet1RouteTable7745B734",
        },
        "SubnetId": Object {
          "Ref": "testVpcPrivateSubnet1SubnetD6A658CE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "testVpcPrivateSubnet1SubnetD6A658CE": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "testVpcPrivateSubnet2DefaultRoute1A78EFE0": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "testVpcPublicSubnet1NATGateway52C27271",
        },
        "RouteTableId": Object {
          "Ref": "testVpcPrivateSubnet2RouteTable03E3B6D6",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "testVpcPrivateSubnet2RouteTable03E3B6D6": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "testVpcPrivateSubnet2RouteTableAssociationB1343E68": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "testVpcPrivateSubnet2RouteTable03E3B6D6",
        },
        "SubnetId": Object {
          "Ref": "testVpcPrivateSubnet2Subnet72DFDA9D",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "testVpcPrivateSubnet2Subnet72DFDA9D": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "testVpcPublicSubnet1DefaultRoute1D00869F": Object {
      "DependsOn": Array [
        "testVpcVPCGW124DFE45",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "testVpcIGW063D7053",
        },
        "RouteTableId": Object {
          "Ref": "testVpcPublicSubnet1RouteTableDD3A9D0A",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "testVpcPublicSubnet1EIP102E34FC": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "testVpcPublicSubnet1NATGateway52C27271": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "testVpcPublicSubnet1EIP102E34FC",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "testVpcPublicSubnet1SubnetA39A0F0F",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "testVpcPublicSubnet1RouteTableAssociation53DBBF1E": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "testVpcPublicSubnet1RouteTableDD3A9D0A",
        },
        "SubnetId": Object {
          "Ref": "testVpcPublicSubnet1SubnetA39A0F0F",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "testVpcPublicSubnet1RouteTableDD3A9D0A": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "testVpcPublicSubnet1SubnetA39A0F0F": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "testVpcPublicSubnet2DefaultRouteEA8CD41C": Object {
      "DependsOn": Array [
        "testVpcVPCGW124DFE45",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "testVpcIGW063D7053",
        },
        "RouteTableId": Object {
          "Ref": "testVpcPublicSubnet2RouteTable57A2CA01",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "testVpcPublicSubnet2RouteTable57A2CA01": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "testVpcPublicSubnet2RouteTableAssociationD06CFFC3": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "testVpcPublicSubnet2RouteTable57A2CA01",
        },
        "SubnetId": Object {
          "Ref": "testVpcPublicSubnet2Subnet94D5D0E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "testVpcPublicSubnet2Subnet94D5D0E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/test/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "testVpcVPCGW124DFE45": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "testVpcIGW063D7053",
        },
        "VpcId": Object {
          "Ref": "testVpc2D302CD6",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
}
`;
